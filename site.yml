---
# This playbook provisions an ec2 host and then deploys the node app and nginx containers to the ec2 host 
# It runs the following steps :
# - Creates an SG
# - Creates a key pair
# - Saves key pair
# - Creates EC2 instance
# - Applies required roles

- name: Set up EC2 instance
  hosts: local
  connection: local
  gather_facts: False
  tags: cloud
  vars:
    instance_type: t1.micro
    env: "exercise" 
    remote_user: "ubuntu"
    remote_admin: "root"
    aws_region: us-east-1d
    instance_type: t2.micro 
    ubuntu_14_04_ami: ami-b56566db
  tasks:
  - name: Create security group
    ec2_group:
        name: "exercise_sg"
        description: "Simple security group for exercise"
        region: "{{ aws_region }}"
        rules:
            - proto: tcp
              type: ssh
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              type: http
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
        rules_egress:
            - proto: all
              type: all
              cidr_ip: 0.0.0.0/0
    register: simple_sg

  - name: Create ssh key
    ec2_key:
        name: "{{ env }}-key"
        region: "{{ aws_region }}"
    register: ec2_pem_key

  - name: Save private key
    copy: content="{{ ec2_pem_key.private_key }}" dest="./{{ env }}-private-key.pem" mode=0600
    when: ec2_pem_key.changed

  - name: Create required EC2 instance
    ec2:
        key_name: "{{ env }}-private-key"
        region: "{{ aws_region }}"
        group_id: "{{ simple_sg.group_id }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ubuntu_14_04_ami }}"
        wait: yes
        instance_tags:
            env: "{{ env }}"
        count_tag: env
        exact_count: 1
    register: ec2_instance


  - name: Add IP to ec2_hosts group
    add_host: hostname={{ item.public_ip }} groups=ec2_hosts
    with_items: ec2_instance.tagged_instances

  - name: Wait for SSH port to start listening
    wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
    with_items: ec2_instance.tagged_instances

- name: Deploy on to created EC2 instances
  hosts: ec2_hosts
  roles: 
    - docker
    - node_app
    - nginx

